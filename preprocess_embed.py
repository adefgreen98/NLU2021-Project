# -*- coding: utf-8 -*-
"""preprocess_embed.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aMxmDzFuFuUJ5Hr23pZCT-pTRjpfWZ15

# General Notes
-  Considering entities as multiple tokens **not stuck together**, each token must be recognized independently from the others
- Scanning sentence left-right: since entities should be ordered we are avoiding assigning same entity to duplicate tokens

# Dependencies
"""

from utils import *
from nlp_init import get_preprocessor


"""SpaCy dependencies adjustments"""


"""# Main loop"""

def main(**kwargs):
    nlp = get_preprocessor()

    dataset = get_dataset(kwargs["train_path"], nlp)
    labels = dataset.get_labels()
    train_set, valid_set = split_dataset(dataset, valid_ratio=kwargs["valid_ratio"])
    
    train_dataloader = get_dataloader(train_set, batch_size=kwargs["batch_size"], shuffle=False)
    eval_dataloader = get_dataloader(valid_set, batch_size=kwargs["batch_size"])
    # test_dataloader = get_dataloader(get_dataset(kwargs["test_path"], nlp), batch_size=1)
    
    net = get_model(kwargs["model"], labels, nlp.vocab.vectors_length, kwargs["hidden_size"], device=get_device())

    del nlp
    
    optimizer = get_optimizer(net, kwargs["learning_rate"], kwargs["optimizer"])

    loss_fn = get_loss(kwargs["loss"])
    
    train(kwargs["nr_epochs"], net, train_dataloader, optimizer, loss_fn, valid_dl=eval_dataloader)
    
    # Testing phase
    test_sentence = "i want a morning flight from boston to chicago"
    print("------------- TEST -------------")
    test_inference = net.run_inference(test_sentence)
    print(f"""Lengths: Sent = {len(test_sentence.split())} | Inf = {len(test_inference)}""")
    print(*list(zip(test_sentence.split(), test_inference)), sep='\n')


experiment = {
    "train_path": "ATIS/train.json",
    "test_path": "ATIS/test.json",
    "valid_ratio": 0.1,
    "batch_size": 32,
    "model": "gru",
    "loss": "cross_entropy",
    "optimizer": "adam",
    "hidden_size": 50,
    "learning_rate": 3e-4,
    "nr_epochs": 20
}


if __name__ == '__main__':
    main(**experiment)



